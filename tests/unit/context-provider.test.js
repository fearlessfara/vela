import { createContextProvider } from '../../dist/apigw/context.js';

describe('createContextProvider', () => {
  it('fills in defaults for missing optional fields', () => {
    const provider = createContextProvider({
      requestId: 'req-1',
      httpMethod: 'GET',
      path: '/demo',
      protocol: 'HTTP/1.1',
      stage: 'dev',
      domainName: 'example.local',
    });

    expect(provider).toEqual({
      requestId: 'req-1',
      extendedRequestId: '',
      awsEndpointRequestId: '',
      accountId: '',
      apiId: '',
      httpMethod: 'GET',
      path: '/demo',
      protocol: 'HTTP/1.1',
      stage: 'dev',
      stageVariables: {},
      domainName: 'example.local',
      domainPrefix: '',
      deploymentId: '',
      resourceId: '',
      resourcePath: '',
      requestTime: '',
      requestTimeEpoch: 0,
      wafResponseCode: 0,
      webaclArn: '',
      identity: {
        sourceIp: '',
        userAgent: '',
        user: '',
        userArn: '',
        cognitoIdentityId: '',
        cognitoIdentityPoolId: '',
        accountId: '',
        apiKey: '',
        apiKeyId: '',
        caller: '',
        accessKey: '',
        cognitoAuthenticationType: '',
        cognitoAuthenticationProvider: '',
        userAgentV2: '',
        clientCert: null,
        principalOrgId: '',
        vpcId: '',
        vpceId: '',
      },
      authorizer: {
        claims: {},
        scopes: [],
        principalId: '',
        integrationLatency: 0,
      },
      error: {
        message: '',
        messageString: '',
        statusCode: 0,
      },
      requestOverride: {
        header: {},
        querystring: {},
        path: {},
      },
      responseOverride: {
        statusCode: 0,
        header: {},
      },
    });
  });

  it('maps provided context values including overrides', () => {
    const provider = createContextProvider({
      requestId: 'req-2',
      extendedRequestId: 'ext-123',
      awsEndpointRequestId: 'aws-req',
      accountId: 'acc-1',
      apiId: 'api-xyz',
      httpMethod: 'POST',
      path: '/items',
      protocol: 'HTTP/2',
      stage: 'prod',
      stageVariables: { version: '1' },
      domainName: 'prod.example.com',
      domainPrefix: 'prod',
      deploymentId: 'dep-9',
      resourceId: 'res-7',
      resourcePath: '/items/{id}',
      requestTime: '02/Feb/2024:10:20:30 +0000',
      requestTimeEpoch: 1706878830000,
      wafResponseCode: 403,
      webaclArn: 'arn:aws:waf::example',
      identity: {
        sourceIp: '192.168.0.1',
        userAgent: 'jest',
        user: 'user-1',
        userArn: 'arn:aws:iam::123:user/demo',
        cognitoIdentityId: 'cognito-id',
        cognitoIdentityPoolId: 'pool-id',
        accountId: 'identity-acc',
        apiKey: 'api-key',
        apiKeyId: 'api-key-id',
        caller: 'caller',
        accessKey: 'access',
        cognitoAuthenticationType: 'auth-type',
        cognitoAuthenticationProvider: 'auth-provider',
        userAgentV2: 'jest/v2',
        clientCert: { subjectDN: 'cn=demo' },
        principalOrgId: 'o-123',
        vpcId: 'vpc-1',
        vpceId: 'vpce-1',
      },
      authorizer: {
        claims: { scope: 'admin' },
        scopes: ['admin', 'writer'],
        principalId: 'principal-1',
        integrationLatency: 42,
      },
      error: {
        message: 'error',
        messageString: 'error-string',
        statusCode: 500,
      },
      requestOverride: {
        header: { 'X-Test': '123' },
        querystring: { page: '1' },
        path: { id: '42' },
      },
      responseOverride: {
        statusCode: 202,
        header: { 'X-Resp': 'ok' },
      },
    });

    expect(provider).toEqual({
      requestId: 'req-2',
      extendedRequestId: 'ext-123',
      awsEndpointRequestId: 'aws-req',
      accountId: 'acc-1',
      apiId: 'api-xyz',
      httpMethod: 'POST',
      path: '/items',
      protocol: 'HTTP/2',
      stage: 'prod',
      stageVariables: { version: '1' },
      domainName: 'prod.example.com',
      domainPrefix: 'prod',
      deploymentId: 'dep-9',
      resourceId: 'res-7',
      resourcePath: '/items/{id}',
      requestTime: '02/Feb/2024:10:20:30 +0000',
      requestTimeEpoch: 1706878830000,
      wafResponseCode: 403,
      webaclArn: 'arn:aws:waf::example',
      identity: {
        sourceIp: '192.168.0.1',
        userAgent: 'jest',
        user: 'user-1',
        userArn: 'arn:aws:iam::123:user/demo',
        cognitoIdentityId: 'cognito-id',
        cognitoIdentityPoolId: 'pool-id',
        accountId: 'identity-acc',
        apiKey: 'api-key',
        apiKeyId: 'api-key-id',
        caller: 'caller',
        accessKey: 'access',
        cognitoAuthenticationType: 'auth-type',
        cognitoAuthenticationProvider: 'auth-provider',
        userAgentV2: 'jest/v2',
        clientCert: { subjectDN: 'cn=demo' },
        principalOrgId: 'o-123',
        vpcId: 'vpc-1',
        vpceId: 'vpce-1',
      },
      authorizer: {
        claims: { scope: 'admin' },
        scopes: ['admin', 'writer'],
        principalId: 'principal-1',
        integrationLatency: 42,
      },
      error: {
        message: 'error',
        messageString: 'error-string',
        statusCode: 500,
      },
      requestOverride: {
        header: { 'X-Test': '123' },
        querystring: { page: '1' },
        path: { id: '42' },
      },
      responseOverride: {
        statusCode: 202,
        header: { 'X-Resp': 'ok' },
      },
    });
  });
});
